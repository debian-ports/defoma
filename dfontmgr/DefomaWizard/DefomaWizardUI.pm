#!/usr/bin/perl -w
#
# This is the (re)generated UI construction class.
#
# DO NOT EDIT THIS FILE, ANY CHANGES THAT YOU MAKE WILL BE LOST WHEN
# THIS FILE WILL BE OVERWRITTEN BY THE NEXT RUN OF Glade::PerlGenerate
#
#==============================================================================
#=== This is the 'defomawizard' class                              
#==============================================================================
package defomawizard;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'defomawizard' (version 0.01)
# 
# Copyright (c) Date 2001年 11月 16日 金曜日 22:44:05 JST
# Author Yasuhiro Take,,, <redstar\@laminar>
#
## Unspecified copying policy, please contact the author\n#  Yasuhiro Take,,, <redstar\@laminar>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.59 - Wed Jun 20 14:48:25 BST 2001
# Copyright (c) Author Dermot Musgrove <dermot.musgrove\@virgin.net>
#
# from Glade file /home/redstar/Projects/defomawizard/defomawizard.glade
# Fri Nov 23 21:04:57 JST 2001
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'DefomaWizard';
    $VERSION = '0.01';
    $AUTHOR  = 'Yasuhiro Take,,, <redstar\@laminar>';
    $DATE    = '2001年 11月 16日 金曜日 22:44:05 JST';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/home/redstar/Projects/defomawizard/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'DefomaWizard',
    VERSION  => '0.01',
    AUTHOR   => 'Yasuhiro Take,,, <redstar\@laminar>',
    DATE     => '2001年 11月 16日 金曜日 22:44:05 JST',
    INSTANCE => 'defomawizard',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_cancel_clicked' => undef,
    'on_clist_select_row' => undef,
    'on_clist_unselect_row' => undef,
    'on_defomawizard_delete_event' => undef,
    'on_entry_activate' => undef,
    'on_next_clicked' => undef,
    'on_radiobutton_no_clicked' => undef,
    'on_radiobutton_yes_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}->{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'glade2perl_logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('DefomaWizard');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/C/LC_MESSAGES/DefomaWizard.mo)
#    $class->load_translations('DefomaWizard', 'test', undef, '/home/redstar/Projects/defomawizard/ppo/DefomaWizard.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"defomawizard-$instance"}) {$instance++;}


    #
    # Construct a GtkWindow 'defomawizard'
    $widgets->{'defomawizard'} = new Gtk::Window;
    $widgets->{'defomawizard'}->set_title(_('DefomaWizard') );
    $widgets->{'defomawizard'}->position('none' );
    $widgets->{'defomawizard'}->set_policy(1, 1, 0 );
    $widgets->{'defomawizard'}->set_modal(0 );
    $widgets->{'defomawizard'}->set_usize(640, 480 );
    $widgets->{'defomawizard'}->realize;
    $forms->{'defomawizard'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'defomawizard'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'defomawizard'}{'accelgroup'}->attach($widgets->{'defomawizard'} );
    $forms->{'defomawizard'}{'defomawizard'} = $widgets->{'defomawizard'};
	#
	# Construct a GtkVBox 'vbox1'
	$widgets->{'vbox1'} = new Gtk::VBox(0, 0 );
	$forms->{'defomawizard'}{'defomawizard'}->add($widgets->{'vbox1'} );
	$widgets->{'vbox1'}->show;
	$forms->{'defomawizard'}{'vbox1'} = $widgets->{'vbox1'};
	$forms->{'defomawizard'}{'vbox1'}->border_width(5 );
	    #
	    # Construct a GtkLabel 'label1'
	    $widgets->{'label1'} = new Gtk::Label(_(''));
	    $widgets->{'label1'}->set_justify('center' );
	    $widgets->{'label1'}->set_line_wrap(0 );
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'label1'} );
	    $widgets->{'label1'}->show;
	    $forms->{'defomawizard'}{'label1'} = $widgets->{'label1'};
	    $forms->{'defomawizard'}{'label1'}->set_alignment(0.5, 0.5 );
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'label1'}, 0, 0, 0, 'start' );
	    #
	    # Construct a GtkHSeparator 'hseparator1'
	    $widgets->{'hseparator1'} = new Gtk::HSeparator;
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'hseparator1'} );
	    $widgets->{'hseparator1'}->show;
	    $forms->{'defomawizard'}{'hseparator1'} = $widgets->{'hseparator1'};
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'hseparator1'}, 0, 1, 0, 'start' );
	    #
	    # Construct a GtkScrolledWindow 'scrolledwindow1'
	    $widgets->{'scrolledwindow1'} = new Gtk::ScrolledWindow( undef, undef);
	    $widgets->{'scrolledwindow1'}->set_policy('never', 'always' );
	    $widgets->{'scrolledwindow1'}->border_width(0 );
	    $widgets->{'scrolledwindow1'}->hscrollbar->set_update_policy('continuous' );
	    $widgets->{'scrolledwindow1'}->vscrollbar->set_update_policy('continuous' );
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'scrolledwindow1'} );
	    $widgets->{'scrolledwindow1'}->show;
	    $forms->{'defomawizard'}{'scrolledwindow1'} = $widgets->{'scrolledwindow1'};
		#
		# Construct a GtkText 'text'
		$widgets->{'text'} = new Gtk::Text( undef, undef );
		$widgets->{'text'}->set_editable(0 );
		$widgets->{'text'}->insert(undef, $widgets->{'text'}->style->text('normal'), undef, _(""));
		$forms->{'defomawizard'}{'scrolledwindow1'}->add($widgets->{'text'} );
		$widgets->{'text'}->show;
		$forms->{'defomawizard'}{'text'} = $widgets->{'text'};
		$forms->{'defomawizard'}{'text'}->can_focus(1 );
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'scrolledwindow1'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkHSeparator 'hseparator3'
	    $widgets->{'hseparator3'} = new Gtk::HSeparator;
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'hseparator3'} );
	    $widgets->{'hseparator3'}->show;
	    $forms->{'defomawizard'}{'hseparator3'} = $widgets->{'hseparator3'};
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'hseparator3'}, 0, 1, 0, 'start' );
	    #
	    # Construct a GtkScrolledWindow 'listbox'
	    $widgets->{'listbox'} = new Gtk::ScrolledWindow( undef, undef);
	    $widgets->{'listbox'}->set_policy('always', 'always' );
	    $widgets->{'listbox'}->border_width(0 );
	    $widgets->{'listbox'}->hscrollbar->set_update_policy('continuous' );
	    $widgets->{'listbox'}->vscrollbar->set_update_policy('continuous' );
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'listbox'} );
	    $widgets->{'listbox'}->show;
	    $forms->{'defomawizard'}{'listbox'} = $widgets->{'listbox'};
		#
		# Construct a GtkCList 'clist'
		$widgets->{'clist'} = new Gtk::CList(1 );
		$widgets->{'clist'}->set_selection_mode('browse' );
		$widgets->{'clist'}->set_border('in' );
		$widgets->{'clist'}->set_column_width(0, 80 );
		$forms->{'defomawizard'}{'listbox'}->add($widgets->{'clist'} );
		$widgets->{'clist'}->show;
		$forms->{'defomawizard'}{'clist'} = $widgets->{'clist'};
		$forms->{'defomawizard'}{'clist'}->can_focus(1 );
		    #
		    # Construct a GtkLabel 'label5'
		    $widgets->{'label5'} = new Gtk::Label(_('label5'));
		    $widgets->{'label5'}->set_justify('center' );
		    $widgets->{'label5'}->set_line_wrap(0 );
		    $forms->{'defomawizard'}{'clist'}->set_column_widget(0, $widgets->{'label5'} );
		    $widgets->{'label5'}->show;
		    $forms->{'defomawizard'}{'label5'} = $widgets->{'label5'};
		    $forms->{'defomawizard'}{'label5'}->set_alignment(0.5, 0.5 );
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'listbox'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkVBox 'yesnobox'
	    $widgets->{'yesnobox'} = new Gtk::VBox(0, 0 );
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'yesnobox'} );
	    $widgets->{'yesnobox'}->show;
	    $forms->{'defomawizard'}{'yesnobox'} = $widgets->{'yesnobox'};
		#
		# Construct a GtkRadioButton 'radiobutton_yes'
		$widgets->{'radiobutton_yes'} = new Gtk::RadioButton(_('YES') );
		$forms->{'defomawizard'}{'rb-group-yesno'} = $widgets->{'radiobutton_yes'};
		$forms->{'defomawizard'}{'yesnobox'}->add($widgets->{'radiobutton_yes'} );
		$widgets->{'radiobutton_yes'}->show;
		$forms->{'defomawizard'}{'radiobutton_yes'} = $widgets->{'radiobutton_yes'};
		$forms->{'defomawizard'}{'radiobutton_yes'}->can_focus(1 );
		$forms->{'defomawizard'}{'radiobutton_yes'}->set_mode(1 );
		$forms->{'defomawizard'}{'radiobutton_yes'}->set_state(0 );
		$forms->{'defomawizard'}{'yesnobox'}->set_child_packing($forms->{'defomawizard'}{'radiobutton_yes'}, 0, 0, 0, 'start' );
		#
		# Construct a GtkRadioButton 'radiobutton_no'
		$widgets->{'radiobutton_no'} = new Gtk::RadioButton(_('NO'), $forms->{'defomawizard'}{'rb-group-yesno'} );
		$forms->{'defomawizard'}{'yesnobox'}->add($widgets->{'radiobutton_no'} );
		$widgets->{'radiobutton_no'}->show;
		$forms->{'defomawizard'}{'radiobutton_no'} = $widgets->{'radiobutton_no'};
		$forms->{'defomawizard'}{'radiobutton_no'}->can_focus(1 );
		$forms->{'defomawizard'}{'radiobutton_no'}->set_mode(1 );
		$forms->{'defomawizard'}{'radiobutton_no'}->set_state(0 );
		$forms->{'defomawizard'}{'yesnobox'}->set_child_packing($forms->{'defomawizard'}{'radiobutton_no'}, 0, 0, 0, 'start' );
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'yesnobox'}, 0, 1, 0, 'start' );
	    #
	    # Construct a GtkEntry 'entry'
	    $widgets->{'entry'} = new Gtk::Entry;
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'entry'} );
	    $widgets->{'entry'}->show;
	    $forms->{'defomawizard'}{'entry'} = $widgets->{'entry'};
	    $forms->{'defomawizard'}{'entry'}->can_focus(1 );
	    $forms->{'defomawizard'}{'entry'}->set_text(_('') );
	    $forms->{'defomawizard'}{'entry'}->set_max_length(0 );
	    $forms->{'defomawizard'}{'entry'}->set_visibility(1 );
	    $forms->{'defomawizard'}{'entry'}->set_editable(1 );
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'entry'}, 0, 0, 0, 'start' );
	    #
	    # Construct a GtkScrolledWindow 'textbox'
	    $widgets->{'textbox'} = new Gtk::ScrolledWindow( undef, undef);
	    $widgets->{'textbox'}->set_policy('never', 'always' );
	    $widgets->{'textbox'}->border_width(0 );
	    $widgets->{'textbox'}->hscrollbar->set_update_policy('continuous' );
	    $widgets->{'textbox'}->vscrollbar->set_update_policy('continuous' );
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'textbox'} );
	    $widgets->{'textbox'}->show;
	    $forms->{'defomawizard'}{'textbox'} = $widgets->{'textbox'};
		#
		# Construct a GtkText 'textarea'
		$widgets->{'textarea'} = new Gtk::Text( undef, undef );
		$widgets->{'textarea'}->set_editable(1 );
		$widgets->{'textarea'}->insert(undef, $widgets->{'textarea'}->style->text('normal'), undef, _(""));
		$forms->{'defomawizard'}{'textbox'}->add($widgets->{'textarea'} );
		$widgets->{'textarea'}->show;
		$forms->{'defomawizard'}{'textarea'} = $widgets->{'textarea'};
		$forms->{'defomawizard'}{'textarea'}->can_focus(1 );
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'textbox'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkHSeparator 'hseparator2'
	    $widgets->{'hseparator2'} = new Gtk::HSeparator;
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'hseparator2'} );
	    $widgets->{'hseparator2'}->show;
	    $forms->{'defomawizard'}{'hseparator2'} = $widgets->{'hseparator2'};
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'hseparator2'}, 0, 1, 0, 'start' );
	    #
	    # Construct a GtkHButtonBox 'hbuttonbox1'
	    $widgets->{'hbuttonbox1'} = new Gtk::HButtonBox;
	    $forms->{'defomawizard'}{'vbox1'}->add($widgets->{'hbuttonbox1'} );
	    $widgets->{'hbuttonbox1'}->show;
	    $forms->{'defomawizard'}{'hbuttonbox1'} = $widgets->{'hbuttonbox1'};
	    $forms->{'defomawizard'}{'hbuttonbox1'}->set_layout('end' );
	    $forms->{'defomawizard'}{'hbuttonbox1'}->set_spacing(14 );
	    $forms->{'defomawizard'}{'hbuttonbox1'}->set_child_size(155, 27 );
	    $forms->{'defomawizard'}{'hbuttonbox1'}->set_child_ipadding(7, 0 );
		#
		# Construct a GtkButton 'next'
		$widgets->{'next'} = new Gtk::Button(_('Next'));
		$forms->{'defomawizard'}{'hbuttonbox1'}->add($widgets->{'next'} );
		$widgets->{'next'}->show;
		$forms->{'defomawizard'}{'next'} = $widgets->{'next'};
		$forms->{'defomawizard'}{'next'}->can_default(1 );
		$forms->{'defomawizard'}{'next'}->can_focus(1 );
		#
		# Construct a GtkButton 'cancel'
		$widgets->{'cancel'} = new Gtk::Button(_('Cancel'));
		$forms->{'defomawizard'}{'hbuttonbox1'}->add($widgets->{'cancel'} );
		$widgets->{'cancel'}->show;
		$forms->{'defomawizard'}{'cancel'} = $widgets->{'cancel'};
		$forms->{'defomawizard'}{'cancel'}->can_default(1 );
		$forms->{'defomawizard'}{'cancel'}->can_focus(1 );
	    $forms->{'defomawizard'}{'vbox1'}->set_child_packing($forms->{'defomawizard'}{'hbuttonbox1'}, 0, 0, 0, 'end' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'defomawizard'}{'defomawizard'}->signal_connect( 'delete_event', "$class\::on_defomawizard_delete_event", '', 'defomawizard', "defomawizard-$instance" );
    $forms->{'defomawizard'}{'clist'}->signal_connect( 'select_row', "$class\::on_clist_select_row", '', 'clist', "defomawizard-$instance" );
    $forms->{'defomawizard'}{'clist'}->signal_connect( 'unselect_row', "$class\::on_clist_unselect_row", '', 'clist', "defomawizard-$instance" );
    $forms->{'defomawizard'}{'radiobutton_yes'}->signal_connect( 'clicked', "$class\::on_radiobutton_yes_clicked", '', 'radiobutton_yes', "defomawizard-$instance" );
    $forms->{'defomawizard'}{'radiobutton_no'}->signal_connect( 'clicked', "$class\::on_radiobutton_no_clicked", '', 'radiobutton_no', "defomawizard-$instance" );
    $forms->{'defomawizard'}{'entry'}->signal_connect( 'activate', "$class\::on_entry_activate", '', 'entry', "defomawizard-$instance" );
    $forms->{'defomawizard'}{'next'}->signal_connect( 'clicked', "$class\::on_next_clicked", '', 'next', "defomawizard-$instance" );
    $forms->{'defomawizard'}{'cancel'}->signal_connect( 'clicked', "$class\::on_cancel_clicked", '', 'cancel', "defomawizard-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'defomawizard'});
    $self->TOPLEVEL($self->FORM->{'defomawizard'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->INSTANCE("defomawizard-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__WH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__CH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new










1;

__END__

#===============================================================================
#==== Documentation
#===============================================================================
=pod

=head1 NAME

DefomaWizard - version 0.01 2001年 11月 16日 金曜日 22:44:05 JST

No description

=head1 SYNOPSIS

 use DefomaWizard;

 To construct the window object and show it call
 
 Gtk->init;
 my $window = defomawizard->new;
 $window->TOPLEVEL->show;
 Gtk->main;
 
 OR use the shorthand for the above calls
 
 defomawizard->app_run;

=head1 DESCRIPTION

Unfortunately, the author has not yet written any documentation :-(

=head1 AUTHOR

Yasuhiro Take,,, <redstar\@laminar>

=cut
