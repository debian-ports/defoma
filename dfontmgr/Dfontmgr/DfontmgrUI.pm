#!/usr/bin/perl -w
#
# This is the (re)generated UI construction class.
#
# DO NOT EDIT THIS FILE, ANY CHANGES THAT YOU MAKE WILL BE LOST WHEN
# THIS FILE WILL BE OVERWRITTEN BY THE NEXT RUN OF Glade::PerlGenerate
#
#==============================================================================
#=== This is the 'fileselection1' class                              
#==============================================================================
package fileselection1;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'fileselection1' (version 0.01)
# 
# Copyright (c) Date 2001Ç¯  9·î 29Æü ÅÚÍËÆü 23:58:32 JST
# Author Yasuhiro Take,,, <redstar\@laminar>
#
## Unspecified copying policy, please contact the author\n#  Yasuhiro Take,,, <redstar\@laminar>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.59 - Wed Jun 20 14:48:25 BST 2001
# Copyright (c) Author Dermot Musgrove <dermot.musgrove\@virgin.net>
#
# from Glade file /home/redstar/Projects/dfontmgr/dfontmgr.glade
# 2001Ç¯ 12·î 29Æü ÅÚÍËÆü 13:24:12 JST
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'Dfontmgr';
    $VERSION = '0.01';
    $AUTHOR  = 'Yasuhiro Take,,, <redstar\@laminar>';
    $DATE    = '2001Ç¯  9·î 29Æü ÅÚÍËÆü 23:58:32 JST';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/home/redstar/Projects/dfontmgr/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'Dfontmgr',
    VERSION  => '0.01',
    AUTHOR   => 'Yasuhiro Take,,, <redstar\@laminar>',
    DATE     => '2001Ç¯  9·î 29Æü ÅÚÍËÆü 23:58:32 JST',
    INSTANCE => 'window1',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_cancel_button1_clicked' => undef,
    'on_fileselection1_delete_event' => undef,
    'on_ok_button1_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}->{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'glade2perl_logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('Dfontmgr');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/ja_JP.eucJP/LC_MESSAGES/Dfontmgr.mo)
#    $class->load_translations('Dfontmgr', 'test', undef, '/home/redstar/Projects/dfontmgr/ppo/Dfontmgr.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"fileselection1-$instance"}) {$instance++;}


    #
    # Construct a GtkFileSelection 'fileselection1'
    $widgets->{'fileselection1'} = new Gtk::FileSelection(_('File Selecter') );
    $widgets->{'fileselection1'}->show_fileop_buttons;
    $widgets->{'fileselection1'}->position('none' );
    $widgets->{'fileselection1'}->set_policy(0, 1, 0 );
    $widgets->{'fileselection1'}->set_modal(1 );
    $widgets->{'fileselection1'}->realize;
    $forms->{'fileselection1'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'fileselection1'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'fileselection1'}{'accelgroup'}->attach($widgets->{'fileselection1'} );
    $forms->{'fileselection1'}{'fileselection1'} = $widgets->{'fileselection1'};
    $forms->{'fileselection1'}{'fileselection1'}->border_width(10 );
	#
	# Construct a GtkButton 'ok_button1'
	$widgets->{'ok_button1'} = $forms->{'fileselection1'}{'fileselection1'}->ok_button;
	$widgets->{'ok_button1'}->child->set_text(_('OK'));
	$widgets->{'ok_button1'}->show;
	$forms->{'fileselection1'}{'ok_button1'} = $widgets->{'ok_button1'};
	$forms->{'fileselection1'}{'ok_button1'}->can_default(1 );
	$forms->{'fileselection1'}{'ok_button1'}->can_focus(1 );
	#
	# Construct a GtkButton 'cancel_button1'
	$widgets->{'cancel_button1'} = $forms->{'fileselection1'}{'fileselection1'}->cancel_button;
	$widgets->{'cancel_button1'}->child->set_text(_('Cancel'));
	$widgets->{'cancel_button1'}->show;
	$forms->{'fileselection1'}{'cancel_button1'} = $widgets->{'cancel_button1'};
	$forms->{'fileselection1'}{'cancel_button1'}->can_default(1 );
	$forms->{'fileselection1'}{'cancel_button1'}->can_focus(1 );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'fileselection1'}{'fileselection1'}->signal_connect( 'delete_event', "$class\::on_fileselection1_delete_event", '', 'fileselection1', "fileselection1-$instance" );
    $forms->{'fileselection1'}{'ok_button1'}->signal_connect( 'clicked', "$class\::on_ok_button1_clicked", '', 'ok_button1', "fileselection1-$instance" );
    $forms->{'fileselection1'}{'cancel_button1'}->signal_connect( 'clicked', "$class\::on_cancel_button1_clicked", '', 'cancel_button1', "fileselection1-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'fileselection1'});
    $self->TOPLEVEL($self->FORM->{'fileselection1'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->INSTANCE("fileselection1-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__WH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__CH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'window1' class                              
#==============================================================================
package window1;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'window1' (version 0.01)
# 
# Copyright (c) Date 2001Ç¯  9·î 29Æü ÅÚÍËÆü 23:58:32 JST
# Author Yasuhiro Take,,, <redstar\@laminar>
#
## Unspecified copying policy, please contact the author\n#  Yasuhiro Take,,, <redstar\@laminar>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.59 - Wed Jun 20 14:48:25 BST 2001
# Copyright (c) Author Dermot Musgrove <dermot.musgrove\@virgin.net>
#
# from Glade file /home/redstar/Projects/dfontmgr/dfontmgr.glade
# 2001Ç¯ 12·î 29Æü ÅÚÍËÆü 13:24:12 JST
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'Dfontmgr';
    $VERSION = '0.01';
    $AUTHOR  = 'Yasuhiro Take,,, <redstar\@laminar>';
    $DATE    = '2001Ç¯  9·î 29Æü ÅÚÍËÆü 23:58:32 JST';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/home/redstar/Projects/dfontmgr/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'Dfontmgr',
    VERSION  => '0.01',
    AUTHOR   => 'Yasuhiro Take,,, <redstar\@laminar>',
    DATE     => '2001Ç¯  9·î 29Æü ÅÚÍËÆü 23:58:32 JST',
    INSTANCE => 'window1',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_button_app_clean_clicked' => undef,
    'on_button_app_idcache_addalias_clicked' => undef,
    'on_button_app_idcache_deletealias_clicked' => undef,
    'on_button_app_idcache_install_clicked' => undef,
    'on_button_app_idcache_uninstall_clicked' => undef,
    'on_button_app_idcache_unset_clicked' => undef,
    'on_button_app_ignore_clicked' => undef,
    'on_button_app_purge_clicked' => undef,
    'on_button_app_update_clicked' => undef,
    'on_button_font_changehints_clicked' => undef,
    'on_button_font_registerfont_clicked' => undef,
    'on_button_font_unregisterfont_clicked' => undef,
    'on_clist_app_application_select_row' => undef,
    'on_clist_app_idcache_click_column' => undef,
    'on_clist_app_idcache_select_row' => undef,
    'on_clist_font_category_select_row' => undef,
    'on_clist_font_fontinformation_select_row' => undef,
    'on_quit_activate' => undef,
    'on_window1_delete_event' => undef,
    'on_window1_drag_data_get' => undef,
    'on_window1_drag_data_received' => undef,
    'on_window1_drag_drop' => undef,
    'on_window1_drag_motion' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}->{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'glade2perl_logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('Dfontmgr');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/ja_JP.eucJP/LC_MESSAGES/Dfontmgr.mo)
#    $class->load_translations('Dfontmgr', 'test', undef, '/home/redstar/Projects/dfontmgr/ppo/Dfontmgr.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"window1-$instance"}) {$instance++;}


    #
    # Construct a GtkWindow 'window1'
    $widgets->{'window1'} = new Gtk::Window;
    $widgets->{'window1'}->set_title(_('Debian Font Manager GUI') );
    $widgets->{'window1'}->position('none' );
    $widgets->{'window1'}->set_policy(0, 1, 0 );
    $widgets->{'window1'}->set_modal(0 );
    $widgets->{'window1'}->realize;
    $forms->{'window1'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'window1'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'window1'}{'accelgroup'}->attach($widgets->{'window1'} );
    $forms->{'window1'}{'window1'} = $widgets->{'window1'};
    $forms->{'window1'}{'window1'}->set_extension_events('all' );
	#
	# Construct a GtkVBox 'vbox1'
	$widgets->{'vbox1'} = new Gtk::VBox(0, 0 );
	$forms->{'window1'}{'window1'}->add($widgets->{'vbox1'} );
	$widgets->{'vbox1'}->show;
	$forms->{'window1'}{'vbox1'} = $widgets->{'vbox1'};
	    #
	    # Construct a GtkMenuBar 'menubar1'
	    $widgets->{'menubar1'} = new Gtk::MenuBar;
	    $widgets->{'menubar1'}->set_shadow_type('out' );
	    $forms->{'window1'}{'vbox1'}->add($widgets->{'menubar1'} );
	    $widgets->{'menubar1'}->show;
	    $forms->{'window1'}{'menubar1'} = $widgets->{'menubar1'};
		#
		# Construct a GtkMenuItem 'file1'
		$widgets->{'file1'} = new Gtk::MenuItem(_('File'));
		$forms->{'window1'}{'menubar1'}->append($widgets->{'file1'} );
		$widgets->{'file1'}->show;
		$forms->{'window1'}{'file1'} = $widgets->{'file1'};
		    #
		    # Construct a GtkMenu 'file1_menu'
		    $widgets->{'file1_menu'} = new Gtk::Menu;
		    $forms->{'window1'}{'file1'}->set_submenu($widgets->{'file1_menu'} );
		    $forms->{'window1'}{'file1_menu'} = $widgets->{'file1_menu'};
			#
			# Construct a GtkMenuItem 'quit'
			$widgets->{'quit'} = new Gtk::MenuItem(_('Quit'));
			$forms->{'window1'}{'file1_menu'}->append($widgets->{'quit'} );
			$widgets->{'quit'}->show;
			$forms->{'window1'}{'quit'} = $widgets->{'quit'};
	    $forms->{'window1'}{'vbox1'}->set_child_packing($forms->{'window1'}{'menubar1'}, 0, 0, 0, 'start' );
	    #
	    # Construct a GtkNotebook 'notebook1'
	    $widgets->{'notebook1'} = new Gtk::Notebook;
	    $forms->{'window1'}{'vbox1'}->add($widgets->{'notebook1'} );
	    $widgets->{'notebook1'}->show;
	    $forms->{'window1'}{'notebook1'} = $widgets->{'notebook1'};
	    $forms->{'window1'}{'notebook1'}->can_focus(1 );
	    $forms->{'window1'}{'notebook1'}->set_tab_pos('top' );
	    $forms->{'window1'}{'notebook1'}->set_show_tabs(1 );
	    $forms->{'window1'}{'notebook1'}->set_show_border(1 );
	    $forms->{'window1'}{'notebook1'}->set_scrollable(0 );
	    $forms->{'window1'}{'notebook1'}->set_tab_hborder(2 );
	    $forms->{'window1'}{'notebook1'}->set_tab_vborder(2 );
		#
		# Construct a GtkTable 'table1'
		$widgets->{'table1'} = new Gtk::Table(4, 2, 0 );
		$widgets->{'table1'}->set_row_spacings(0 );
		$widgets->{'table1'}->set_col_spacings(0 );
		$widgets->{'table1'}->show;
		$forms->{'window1'}{'table1'} = $widgets->{'table1'};
		    #
		    # Construct a GtkScrolledWindow 'scrolledwindow2'
		    $widgets->{'scrolledwindow2'} = new Gtk::ScrolledWindow( undef, undef);
		    $widgets->{'scrolledwindow2'}->set_policy('never', 'always' );
		    $widgets->{'scrolledwindow2'}->border_width(0 );
		    $widgets->{'scrolledwindow2'}->hscrollbar->set_update_policy('continuous' );
		    $widgets->{'scrolledwindow2'}->vscrollbar->set_update_policy('continuous' );
		    $forms->{'window1'}{'table1'}->attach($widgets->{'scrolledwindow2'}, 1, 2, 3, 4, ['fill'], ['fill'], 0, 0 );
		    $widgets->{'scrolledwindow2'}->show;
		    $forms->{'window1'}{'scrolledwindow2'} = $widgets->{'scrolledwindow2'};
			#
			# Construct a GtkText 'text_font_fontinformation'
			$widgets->{'text_font_fontinformation'} = new Gtk::Text( undef, undef );
			$widgets->{'text_font_fontinformation'}->set_editable(0 );
			$widgets->{'text_font_fontinformation'}->insert(undef, $widgets->{'text_font_fontinformation'}->style->text('normal'), undef, _(""));
			$forms->{'window1'}{'scrolledwindow2'}->add($widgets->{'text_font_fontinformation'} );
			$widgets->{'text_font_fontinformation'}->show;
			$forms->{'window1'}{'text_font_fontinformation'} = $widgets->{'text_font_fontinformation'};
			$forms->{'window1'}{'text_font_fontinformation'}->set_usize(420, 160 );
			$forms->{'window1'}{'text_font_fontinformation'}->can_focus(1 );
		    #
		    # Construct a GtkLabel 'label5'
		    $widgets->{'label5'} = new Gtk::Label(_('Category'));
		    $widgets->{'label5'}->set_justify('left' );
		    $widgets->{'label5'}->set_line_wrap(0 );
		    $forms->{'window1'}{'table1'}->attach($widgets->{'label5'}, 0, 1, 1, 2, ['fill'], [], 0, 0 );
		    $widgets->{'label5'}->show;
		    $forms->{'window1'}{'label5'} = $widgets->{'label5'};
		    $forms->{'window1'}{'label5'}->set_alignment(0, 0.5 );
		    #
		    # Construct a GtkLabel 'label6'
		    $widgets->{'label6'} = new Gtk::Label(_('Font Information'));
		    $widgets->{'label6'}->set_justify('center' );
		    $widgets->{'label6'}->set_line_wrap(0 );
		    $forms->{'window1'}{'table1'}->attach($widgets->{'label6'}, 1, 2, 1, 2, ['fill'], [], 0, 0 );
		    $widgets->{'label6'}->show;
		    $forms->{'window1'}{'label6'} = $widgets->{'label6'};
		    $forms->{'window1'}{'label6'}->set_alignment(0, 0.5 );
		    #
		    # Construct a GtkHandleBox 'handlebox1'
		    $widgets->{'handlebox1'} = new Gtk::HandleBox;
		    $widgets->{'handlebox1'}->set_handle_position('left' );
		    $widgets->{'handlebox1'}->set_shadow_type('out' );
		    $widgets->{'handlebox1'}->set_snap_edge('top' );
		    $forms->{'window1'}{'table1'}->attach($widgets->{'handlebox1'}, 0, 2, 0, 1, ['fill'], ['fill'], 0, 0 );
		    $widgets->{'handlebox1'}->show;
		    $forms->{'window1'}{'handlebox1'} = $widgets->{'handlebox1'};
			#
			# Construct a GtkHBox 'hbox1'
			$widgets->{'hbox1'} = new Gtk::HBox(0, 0 );
			$forms->{'window1'}{'handlebox1'}->add($widgets->{'hbox1'} );
			$widgets->{'hbox1'}->show;
			$forms->{'window1'}{'hbox1'} = $widgets->{'hbox1'};
			    #
			    # Construct a GtkButton 'button_font_registerfont'
			    $widgets->{'button_font_registerfont'} = new Gtk::Button(_(' Register Font '));
			    $forms->{'window1'}{'hbox1'}->add($widgets->{'button_font_registerfont'} );
			    $widgets->{'button_font_registerfont'}->show;
			    $forms->{'window1'}{'button_font_registerfont'} = $widgets->{'button_font_registerfont'};
			    $forms->{'window1'}{'button_font_registerfont'}->can_focus(1 );
			    $forms->{'window1'}{'hbox1'}->set_child_packing($forms->{'window1'}{'button_font_registerfont'}, 0, 0, 0, 'start' );
			    #
			    # Construct a GtkButton 'button_font_unregisterfont'
			    $widgets->{'button_font_unregisterfont'} = new Gtk::Button(_(' Unregister Font '));
			    $forms->{'window1'}{'hbox1'}->add($widgets->{'button_font_unregisterfont'} );
			    $widgets->{'button_font_unregisterfont'}->show;
			    $forms->{'window1'}{'button_font_unregisterfont'} = $widgets->{'button_font_unregisterfont'};
			    $forms->{'window1'}{'button_font_unregisterfont'}->can_focus(1 );
			    $forms->{'window1'}{'hbox1'}->set_child_packing($forms->{'window1'}{'button_font_unregisterfont'}, 0, 0, 0, 'start' );
			    #
			    # Construct a GtkButton 'button_font_changehints'
			    $widgets->{'button_font_changehints'} = new Gtk::Button(_(' Change Hints '));
			    $forms->{'window1'}{'hbox1'}->add($widgets->{'button_font_changehints'} );
			    $widgets->{'button_font_changehints'}->show;
			    $forms->{'window1'}{'button_font_changehints'} = $widgets->{'button_font_changehints'};
			    $forms->{'window1'}{'button_font_changehints'}->can_focus(1 );
			    $forms->{'window1'}{'hbox1'}->set_child_packing($forms->{'window1'}{'button_font_changehints'}, 0, 0, 0, 'start' );
		    #
		    # Construct a GtkScrolledWindow 'scrolledwindow8'
		    $widgets->{'scrolledwindow8'} = new Gtk::ScrolledWindow( undef, undef);
		    $widgets->{'scrolledwindow8'}->set_policy('never', 'always' );
		    $widgets->{'scrolledwindow8'}->border_width(0 );
		    $widgets->{'scrolledwindow8'}->hscrollbar->set_update_policy('continuous' );
		    $widgets->{'scrolledwindow8'}->vscrollbar->set_update_policy('continuous' );
		    $forms->{'window1'}{'table1'}->attach($widgets->{'scrolledwindow8'}, 0, 1, 2, 4, ['fill'], ['expand', 'fill'], 0, 0 );
		    $widgets->{'scrolledwindow8'}->show;
		    $forms->{'window1'}{'scrolledwindow8'} = $widgets->{'scrolledwindow8'};
			#
			# Construct a GtkCList 'clist_font_category'
			$widgets->{'clist_font_category'} = new Gtk::CList(1 );
			$widgets->{'clist_font_category'}->set_selection_mode('single' );
			$widgets->{'clist_font_category'}->set_border('in' );
			$widgets->{'clist_font_category'}->set_column_width(0, 80 );
			$forms->{'window1'}{'scrolledwindow8'}->add($widgets->{'clist_font_category'} );
			$widgets->{'clist_font_category'}->show;
			$forms->{'window1'}{'clist_font_category'} = $widgets->{'clist_font_category'};
			$forms->{'window1'}{'clist_font_category'}->set_usize(120, 0 );
			$forms->{'window1'}{'clist_font_category'}->can_focus(1 );
		    #
		    # Construct a GtkScrolledWindow 'scrolledwindow9'
		    $widgets->{'scrolledwindow9'} = new Gtk::ScrolledWindow( undef, undef);
		    $widgets->{'scrolledwindow9'}->set_policy('never', 'always' );
		    $widgets->{'scrolledwindow9'}->border_width(0 );
		    $widgets->{'scrolledwindow9'}->hscrollbar->set_update_policy('continuous' );
		    $widgets->{'scrolledwindow9'}->vscrollbar->set_update_policy('continuous' );
		    $forms->{'window1'}{'table1'}->attach($widgets->{'scrolledwindow9'}, 1, 2, 2, 3, ['expand', 'fill'], ['fill'], 0, 0 );
		    $widgets->{'scrolledwindow9'}->show;
		    $forms->{'window1'}{'scrolledwindow9'} = $widgets->{'scrolledwindow9'};
			#
			# Construct a GtkCList 'clist_font_fontinformation'
			$widgets->{'clist_font_fontinformation'} = new Gtk::CList(1 );
			$widgets->{'clist_font_fontinformation'}->set_selection_mode('single' );
			$widgets->{'clist_font_fontinformation'}->set_border('in' );
			$widgets->{'clist_font_fontinformation'}->set_column_width(0, 80 );
			$forms->{'window1'}{'scrolledwindow9'}->add($widgets->{'clist_font_fontinformation'} );
			$widgets->{'clist_font_fontinformation'}->show;
			$forms->{'window1'}{'clist_font_fontinformation'} = $widgets->{'clist_font_fontinformation'};
			$forms->{'window1'}{'clist_font_fontinformation'}->set_usize(420, 120 );
			$forms->{'window1'}{'clist_font_fontinformation'}->can_focus(1 );
		#
		# Construct a GtkLabel 'label1'
		$widgets->{'label1'} = new Gtk::Label(_('Font'));
		$widgets->{'label1'}->set_justify('center' );
		$widgets->{'label1'}->set_line_wrap(0 );
		$forms->{'window1'}{'notebook1'}->append_page($forms->{'window1'}{'table1'}, $widgets->{'label1'} );
		$widgets->{'label1'}->show;
		$forms->{'window1'}{'label1'} = $widgets->{'label1'};
		$forms->{'window1'}{'label1'}->set_alignment(0.5, 0.5 );
		#
		# Construct a GtkTable 'table2'
		$widgets->{'table2'} = new Gtk::Table(4, 2, 0 );
		$widgets->{'table2'}->set_row_spacings(0 );
		$widgets->{'table2'}->set_col_spacings(0 );
		$widgets->{'table2'}->show;
		$forms->{'window1'}{'table2'} = $widgets->{'table2'};
		    #
		    # Construct a GtkScrolledWindow 'scrolledwindow10'
		    $widgets->{'scrolledwindow10'} = new Gtk::ScrolledWindow( undef, undef);
		    $widgets->{'scrolledwindow10'}->set_policy('never', 'always' );
		    $widgets->{'scrolledwindow10'}->border_width(0 );
		    $widgets->{'scrolledwindow10'}->hscrollbar->set_update_policy('continuous' );
		    $widgets->{'scrolledwindow10'}->vscrollbar->set_update_policy('continuous' );
		    $forms->{'window1'}{'table2'}->attach($widgets->{'scrolledwindow10'}, 0, 1, 2, 4, ['fill'], ['fill'], 0, 0 );
		    $widgets->{'scrolledwindow10'}->show;
		    $forms->{'window1'}{'scrolledwindow10'} = $widgets->{'scrolledwindow10'};
			#
			# Construct a GtkCList 'clist_app_application'
			$widgets->{'clist_app_application'} = new Gtk::CList(1 );
			$widgets->{'clist_app_application'}->set_selection_mode('single' );
			$widgets->{'clist_app_application'}->set_border('in' );
			$widgets->{'clist_app_application'}->set_column_width(0, 80 );
			$forms->{'window1'}{'scrolledwindow10'}->add($widgets->{'clist_app_application'} );
			$widgets->{'clist_app_application'}->show;
			$forms->{'window1'}{'clist_app_application'} = $widgets->{'clist_app_application'};
			$forms->{'window1'}{'clist_app_application'}->set_usize(120, 0 );
			$forms->{'window1'}{'clist_app_application'}->can_focus(1 );
		    #
		    # Construct a GtkLabel 'label15'
		    $widgets->{'label15'} = new Gtk::Label(_('Application'));
		    $widgets->{'label15'}->set_justify('left' );
		    $widgets->{'label15'}->set_line_wrap(0 );
		    $forms->{'window1'}{'table2'}->attach($widgets->{'label15'}, 0, 1, 1, 2, ['fill'], [], 0, 0 );
		    $widgets->{'label15'}->show;
		    $forms->{'window1'}{'label15'} = $widgets->{'label15'};
		    $forms->{'window1'}{'label15'}->set_alignment(0, 0.5 );
		    #
		    # Construct a GtkLabel 'label16'
		    $widgets->{'label16'} = new Gtk::Label(_('Application Information'));
		    $widgets->{'label16'}->set_justify('center' );
		    $widgets->{'label16'}->set_line_wrap(0 );
		    $forms->{'window1'}{'table2'}->attach($widgets->{'label16'}, 1, 2, 1, 2, ['expand', 'fill'], [], 0, 0 );
		    $widgets->{'label16'}->show;
		    $forms->{'window1'}{'label16'} = $widgets->{'label16'};
		    $forms->{'window1'}{'label16'}->set_alignment(0, 0.5 );
		    #
		    # Construct a GtkScrolledWindow 'scrolledwindow6'
		    $widgets->{'scrolledwindow6'} = new Gtk::ScrolledWindow( undef, undef);
		    $widgets->{'scrolledwindow6'}->set_policy('never', 'always' );
		    $widgets->{'scrolledwindow6'}->border_width(0 );
		    $widgets->{'scrolledwindow6'}->hscrollbar->set_update_policy('continuous' );
		    $widgets->{'scrolledwindow6'}->vscrollbar->set_update_policy('continuous' );
		    $forms->{'window1'}{'table2'}->attach($widgets->{'scrolledwindow6'}, 1, 2, 2, 3, ['fill'], ['fill'], 0, 0 );
		    $widgets->{'scrolledwindow6'}->show;
		    $forms->{'window1'}{'scrolledwindow6'} = $widgets->{'scrolledwindow6'};
			#
			# Construct a GtkText 'text_app_appinformation'
			$widgets->{'text_app_appinformation'} = new Gtk::Text( undef, undef );
			$widgets->{'text_app_appinformation'}->set_editable(0 );
			$widgets->{'text_app_appinformation'}->insert(undef, $widgets->{'text_app_appinformation'}->style->text('normal'), undef, _(""));
			$forms->{'window1'}{'scrolledwindow6'}->add($widgets->{'text_app_appinformation'} );
			$widgets->{'text_app_appinformation'}->show;
			$forms->{'window1'}{'text_app_appinformation'} = $widgets->{'text_app_appinformation'};
			$forms->{'window1'}{'text_app_appinformation'}->set_usize(420, 120 );
			$forms->{'window1'}{'text_app_appinformation'}->can_focus(1 );
		    #
		    # Construct a GtkNotebook 'notebook2'
		    $widgets->{'notebook2'} = new Gtk::Notebook;
		    $forms->{'window1'}{'table2'}->attach($widgets->{'notebook2'}, 1, 2, 3, 4, ['fill'], ['expand', 'fill'], 0, 0 );
		    $widgets->{'notebook2'}->show;
		    $forms->{'window1'}{'notebook2'} = $widgets->{'notebook2'};
		    $forms->{'window1'}{'notebook2'}->can_focus(1 );
		    $forms->{'window1'}{'notebook2'}->set_tab_pos('top' );
		    $forms->{'window1'}{'notebook2'}->set_show_tabs(1 );
		    $forms->{'window1'}{'notebook2'}->set_show_border(1 );
		    $forms->{'window1'}{'notebook2'}->set_scrollable(0 );
		    $forms->{'window1'}{'notebook2'}->set_tab_hborder(2 );
		    $forms->{'window1'}{'notebook2'}->set_tab_vborder(2 );
			#
			# Construct a GtkVBox 'vbox2'
			$widgets->{'vbox2'} = new Gtk::VBox(0, 0 );
			$widgets->{'vbox2'}->show;
			$forms->{'window1'}{'vbox2'} = $widgets->{'vbox2'};
			    #
			    # Construct a GtkHandleBox 'handlebox2'
			    $widgets->{'handlebox2'} = new Gtk::HandleBox;
			    $widgets->{'handlebox2'}->set_handle_position('left' );
			    $widgets->{'handlebox2'}->set_shadow_type('out' );
			    $widgets->{'handlebox2'}->set_snap_edge('top' );
			    $forms->{'window1'}{'vbox2'}->add($widgets->{'handlebox2'} );
			    $widgets->{'handlebox2'}->show;
			    $forms->{'window1'}{'handlebox2'} = $widgets->{'handlebox2'};
				#
				# Construct a GtkHBox 'hbox2'
				$widgets->{'hbox2'} = new Gtk::HBox(0, 0 );
				$forms->{'window1'}{'handlebox2'}->add($widgets->{'hbox2'} );
				$widgets->{'hbox2'}->show;
				$forms->{'window1'}{'hbox2'} = $widgets->{'hbox2'};
				    #
				    # Construct a GtkButton 'button_app_idcache_install'
				    $widgets->{'button_app_idcache_install'} = new Gtk::Button(_(' Install '));
				    $forms->{'window1'}{'hbox2'}->add($widgets->{'button_app_idcache_install'} );
				    $widgets->{'button_app_idcache_install'}->show;
				    $forms->{'window1'}{'button_app_idcache_install'} = $widgets->{'button_app_idcache_install'};
				    $forms->{'window1'}{'button_app_idcache_install'}->can_focus(1 );
				    $forms->{'window1'}{'tooltips'}->set_tip($forms->{'window1'}{'button_app_idcache_install'}, _('Make the selected Font provide the selected Identifier, when dependency meets' ));
				    $forms->{'window1'}{'hbox2'}->set_child_packing($forms->{'window1'}{'button_app_idcache_install'}, 0, 0, 0, 'start' );
				    #
				    # Construct a GtkButton 'button_app_idcache_uninstall'
				    $widgets->{'button_app_idcache_uninstall'} = new Gtk::Button(_(' Exclude '));
				    $forms->{'window1'}{'hbox2'}->add($widgets->{'button_app_idcache_uninstall'} );
				    $widgets->{'button_app_idcache_uninstall'}->show;
				    $forms->{'window1'}{'button_app_idcache_uninstall'} = $widgets->{'button_app_idcache_uninstall'};
				    $forms->{'window1'}{'button_app_idcache_uninstall'}->can_focus(1 );
				    $forms->{'window1'}{'tooltips'}->set_tip($forms->{'window1'}{'button_app_idcache_uninstall'}, _('Prevent the selected Font from providing the selected Identifier' ));
				    $forms->{'window1'}{'hbox2'}->set_child_packing($forms->{'window1'}{'button_app_idcache_uninstall'}, 0, 0, 0, 'start' );
				    #
				    # Construct a GtkButton 'button_app_idcache_unset'
				    $widgets->{'button_app_idcache_unset'} = new Gtk::Button(_(' Unset '));
				    $forms->{'window1'}{'hbox2'}->add($widgets->{'button_app_idcache_unset'} );
				    $widgets->{'button_app_idcache_unset'}->show;
				    $forms->{'window1'}{'button_app_idcache_unset'} = $widgets->{'button_app_idcache_unset'};
				    $forms->{'window1'}{'button_app_idcache_unset'}->can_focus(1 );
				    $forms->{'window1'}{'tooltips'}->set_tip($forms->{'window1'}{'button_app_idcache_unset'}, _('Unset the Install/Exclude flag' ));
				    $forms->{'window1'}{'hbox2'}->set_child_packing($forms->{'window1'}{'button_app_idcache_unset'}, 0, 0, 0, 'start' );
				    #
				    # Construct a GtkButton 'button_app_idcache_addalias'
				    $widgets->{'button_app_idcache_addalias'} = new Gtk::Button(_(' Add Alias '));
				    $forms->{'window1'}{'hbox2'}->add($widgets->{'button_app_idcache_addalias'} );
				    $widgets->{'button_app_idcache_addalias'}->show;
				    $forms->{'window1'}{'button_app_idcache_addalias'} = $widgets->{'button_app_idcache_addalias'};
				    $forms->{'window1'}{'button_app_idcache_addalias'}->can_focus(1 );
				    $forms->{'window1'}{'tooltips'}->set_tip($forms->{'window1'}{'button_app_idcache_addalias'}, _('Add alias Identifier of the selected Font' ));
				    $forms->{'window1'}{'hbox2'}->set_child_packing($forms->{'window1'}{'button_app_idcache_addalias'}, 0, 0, 0, 'start' );
				    #
				    # Construct a GtkButton 'button_app_idcache_deletealias'
				    $widgets->{'button_app_idcache_deletealias'} = new Gtk::Button(_(' Delete Alias '));
				    $forms->{'window1'}{'hbox2'}->add($widgets->{'button_app_idcache_deletealias'} );
				    $widgets->{'button_app_idcache_deletealias'}->show;
				    $forms->{'window1'}{'button_app_idcache_deletealias'} = $widgets->{'button_app_idcache_deletealias'};
				    $forms->{'window1'}{'button_app_idcache_deletealias'}->can_focus(1 );
				    $forms->{'window1'}{'tooltips'}->set_tip($forms->{'window1'}{'button_app_idcache_deletealias'}, _('Delete the user-defined alias of the selected Font' ));
				    $forms->{'window1'}{'hbox2'}->set_child_packing($forms->{'window1'}{'button_app_idcache_deletealias'}, 0, 0, 0, 'start' );
			    $forms->{'window1'}{'vbox2'}->set_child_packing($forms->{'window1'}{'handlebox2'}, 0, 1, 0, 'start' );
			    #
			    # Construct a GtkHBox 'hbox3'
			    $widgets->{'hbox3'} = new Gtk::HBox(0, 0 );
			    $forms->{'window1'}{'vbox2'}->add($widgets->{'hbox3'} );
			    $widgets->{'hbox3'}->show;
			    $forms->{'window1'}{'hbox3'} = $widgets->{'hbox3'};
				#
				# Construct a GtkLabel 'label23'
				$widgets->{'label23'} = new Gtk::Label(_(' Id Cache: '));
				$widgets->{'label23'}->set_justify('center' );
				$widgets->{'label23'}->set_line_wrap(0 );
				$forms->{'window1'}{'hbox3'}->add($widgets->{'label23'} );
				$widgets->{'label23'}->show;
				$forms->{'window1'}{'label23'} = $widgets->{'label23'};
				$forms->{'window1'}{'label23'}->set_alignment(0.5, 0.5 );
				$forms->{'window1'}{'hbox3'}->set_child_packing($forms->{'window1'}{'label23'}, 0, 0, 0, 'start' );
				#
				# Construct a GtkOptionMenu 'optionmenu_app_idcache'
				$widgets->{'optionmenu_app_idcache'} = new Gtk::OptionMenu;
				$forms->{'window1'}{'hbox3'}->add($widgets->{'optionmenu_app_idcache'} );
				$widgets->{'optionmenu_app_idcache'}->show;
				$forms->{'window1'}{'optionmenu_app_idcache'} = $widgets->{'optionmenu_app_idcache'};
				$forms->{'window1'}{'optionmenu_app_idcache'}->can_focus(1 );
				$widgets->{'optionmenu_app_idcache_menu'} = new Gtk::Menu;
				$forms->{'window1'}{'optionmenu_app_idcache'}->set_menu($widgets->{'optionmenu_app_idcache_menu'} );
				$forms->{'window1'}{'optionmenu_app_idcache_menu'} = $widgets->{'optionmenu_app_idcache_menu'};
				$forms->{'window1'}{'optionmenu_app_idcache'}->set_history( 0 );
				$forms->{'window1'}{'hbox3'}->set_child_packing($forms->{'window1'}{'optionmenu_app_idcache'}, 1, 1, 0, 'start' );
			    $forms->{'window1'}{'vbox2'}->set_child_packing($forms->{'window1'}{'hbox3'}, 0, 0, 0, 'start' );
			    #
			    # Construct a GtkScrolledWindow 'scrolledwindow3'
			    $widgets->{'scrolledwindow3'} = new Gtk::ScrolledWindow( undef, undef);
			    $widgets->{'scrolledwindow3'}->set_policy('always', 'always' );
			    $widgets->{'scrolledwindow3'}->border_width(0 );
			    $widgets->{'scrolledwindow3'}->hscrollbar->set_update_policy('continuous' );
			    $widgets->{'scrolledwindow3'}->vscrollbar->set_update_policy('continuous' );
			    $forms->{'window1'}{'vbox2'}->add($widgets->{'scrolledwindow3'} );
			    $widgets->{'scrolledwindow3'}->show;
			    $forms->{'window1'}{'scrolledwindow3'} = $widgets->{'scrolledwindow3'};
			    $forms->{'window1'}{'scrolledwindow3'}->set_usize(438, 0 );
				#
				# Construct a GtkCList 'clist_app_idcache'
				$widgets->{'clist_app_idcache'} = new Gtk::CList(3 );
				$widgets->{'clist_app_idcache'}->set_selection_mode('browse' );
				$widgets->{'clist_app_idcache'}->set_border('in' );
				$widgets->{'clist_app_idcache'}->column_titles_show;
				$widgets->{'clist_app_idcache'}->set_column_width(0, 80 );
				$widgets->{'clist_app_idcache'}->set_column_width(1, 80 );
				$widgets->{'clist_app_idcache'}->set_column_width(2, 80 );
				$forms->{'window1'}{'scrolledwindow3'}->add($widgets->{'clist_app_idcache'} );
				$widgets->{'clist_app_idcache'}->show;
				$forms->{'window1'}{'clist_app_idcache'} = $widgets->{'clist_app_idcache'};
				$forms->{'window1'}{'clist_app_idcache'}->set_usize(420, 160 );
				$forms->{'window1'}{'clist_app_idcache'}->can_focus(1 );
				    #
				    # Construct a GtkLabel 'label17'
				    $widgets->{'label17'} = new Gtk::Label(_('  Type '));
				    $widgets->{'label17'}->set_justify('center' );
				    $widgets->{'label17'}->set_line_wrap(0 );
				    $forms->{'window1'}{'clist_app_idcache'}->set_column_widget(0, $widgets->{'label17'} );
				    $widgets->{'label17'}->show;
				    $forms->{'window1'}{'label17'} = $widgets->{'label17'};
				    $forms->{'window1'}{'label17'}->set_alignment(0.5, 0.5 );
				    #
				    # Construct a GtkLabel 'label18'
				    $widgets->{'label18'} = new Gtk::Label(_(' Identifier '));
				    $widgets->{'label18'}->set_justify('center' );
				    $widgets->{'label18'}->set_line_wrap(0 );
				    $forms->{'window1'}{'clist_app_idcache'}->set_column_widget(1, $widgets->{'label18'} );
				    $widgets->{'label18'}->show;
				    $forms->{'window1'}{'label18'} = $widgets->{'label18'};
				    $forms->{'window1'}{'label18'}->set_alignment(0.5, 0.5 );
				    #
				    # Construct a GtkLabel 'label19'
				    $widgets->{'label19'} = new Gtk::Label(_(' Font '));
				    $widgets->{'label19'}->set_justify('center' );
				    $widgets->{'label19'}->set_line_wrap(0 );
				    $forms->{'window1'}{'clist_app_idcache'}->set_column_widget(2, $widgets->{'label19'} );
				    $widgets->{'label19'}->show;
				    $forms->{'window1'}{'label19'} = $widgets->{'label19'};
				    $forms->{'window1'}{'label19'}->set_alignment(0.5, 0.5 );
			    $forms->{'window1'}{'vbox2'}->set_child_packing($forms->{'window1'}{'scrolledwindow3'}, 1, 1, 0, 'start' );
			#
			# Construct a GtkLabel 'label20'
			$widgets->{'label20'} = new Gtk::Label(_('Id Cache'));
			$widgets->{'label20'}->set_justify('center' );
			$widgets->{'label20'}->set_line_wrap(0 );
			$forms->{'window1'}{'notebook2'}->append_page($forms->{'window1'}{'vbox2'}, $widgets->{'label20'} );
			$widgets->{'label20'}->show;
			$forms->{'window1'}{'label20'} = $widgets->{'label20'};
			$forms->{'window1'}{'label20'}->set_alignment(0.5, 0.5 );
			#
			# Construct a GtkLabel 'label22'
			$widgets->{'label22'} = new Gtk::Label(_('Not Implemented'));
			$widgets->{'label22'}->set_justify('center' );
			$widgets->{'label22'}->set_line_wrap(0 );
			$widgets->{'label22'}->show;
			$forms->{'window1'}{'label22'} = $widgets->{'label22'};
			$forms->{'window1'}{'label22'}->set_alignment(0.5, 0.5 );
			#
			# Construct a GtkLabel 'label21'
			$widgets->{'label21'} = new Gtk::Label(_('Subst Cache'));
			$widgets->{'label21'}->set_justify('center' );
			$widgets->{'label21'}->set_line_wrap(0 );
			$forms->{'window1'}{'notebook2'}->append_page($forms->{'window1'}{'label22'}, $widgets->{'label21'} );
			$widgets->{'label21'}->show;
			$forms->{'window1'}{'label21'} = $widgets->{'label21'};
			$forms->{'window1'}{'label21'}->set_alignment(0.5, 0.5 );
		    #
		    # Construct a GtkHandleBox 'handlebox3'
		    $widgets->{'handlebox3'} = new Gtk::HandleBox;
		    $widgets->{'handlebox3'}->set_handle_position('left' );
		    $widgets->{'handlebox3'}->set_shadow_type('out' );
		    $widgets->{'handlebox3'}->set_snap_edge('top' );
		    $forms->{'window1'}{'table2'}->attach($widgets->{'handlebox3'}, 0, 2, 0, 1, ['fill'], ['expand', 'fill'], 0, 0 );
		    $widgets->{'handlebox3'}->show;
		    $forms->{'window1'}{'handlebox3'} = $widgets->{'handlebox3'};
			#
			# Construct a GtkHBox 'hbox4'
			$widgets->{'hbox4'} = new Gtk::HBox(0, 0 );
			$forms->{'window1'}{'handlebox3'}->add($widgets->{'hbox4'} );
			$widgets->{'hbox4'}->show;
			$forms->{'window1'}{'hbox4'} = $widgets->{'hbox4'};
			    #
			    # Construct a GtkButton 'button_app_update'
			    $widgets->{'button_app_update'} = new Gtk::Button(_(' Update '));
			    $forms->{'window1'}{'hbox4'}->add($widgets->{'button_app_update'} );
			    $widgets->{'button_app_update'}->show;
			    $forms->{'window1'}{'button_app_update'} = $widgets->{'button_app_update'};
			    $forms->{'window1'}{'button_app_update'}->can_focus(1 );
			    $forms->{'window1'}{'hbox4'}->set_child_packing($forms->{'window1'}{'button_app_update'}, 0, 0, 0, 'start' );
			    #
			    # Construct a GtkButton 'button_app_clean'
			    $widgets->{'button_app_clean'} = new Gtk::Button(_(' Clean '));
			    $forms->{'window1'}{'hbox4'}->add($widgets->{'button_app_clean'} );
			    $widgets->{'button_app_clean'}->show;
			    $forms->{'window1'}{'button_app_clean'} = $widgets->{'button_app_clean'};
			    $forms->{'window1'}{'button_app_clean'}->can_focus(1 );
			    $forms->{'window1'}{'hbox4'}->set_child_packing($forms->{'window1'}{'button_app_clean'}, 0, 0, 0, 'start' );
			    #
			    # Construct a GtkButton 'button_app_purge'
			    $widgets->{'button_app_purge'} = new Gtk::Button(_(' Purge '));
			    $forms->{'window1'}{'hbox4'}->add($widgets->{'button_app_purge'} );
			    $widgets->{'button_app_purge'}->show;
			    $forms->{'window1'}{'button_app_purge'} = $widgets->{'button_app_purge'};
			    $forms->{'window1'}{'button_app_purge'}->can_focus(1 );
			    $forms->{'window1'}{'hbox4'}->set_child_packing($forms->{'window1'}{'button_app_purge'}, 0, 0, 0, 'start' );
			    #
			    # Construct a GtkButton 'button_app_ignore'
			    $widgets->{'button_app_ignore'} = new Gtk::Button(_(' Ignore '));
			    $forms->{'window1'}{'hbox4'}->add($widgets->{'button_app_ignore'} );
			    $widgets->{'button_app_ignore'}->show;
			    $forms->{'window1'}{'button_app_ignore'} = $widgets->{'button_app_ignore'};
			    $forms->{'window1'}{'button_app_ignore'}->can_focus(1 );
			    $forms->{'window1'}{'hbox4'}->set_child_packing($forms->{'window1'}{'button_app_ignore'}, 0, 0, 0, 'start' );
		#
		# Construct a GtkLabel 'label2'
		$widgets->{'label2'} = new Gtk::Label(_('Application'));
		$widgets->{'label2'}->set_justify('center' );
		$widgets->{'label2'}->set_line_wrap(0 );
		$forms->{'window1'}{'notebook1'}->append_page($forms->{'window1'}{'table2'}, $widgets->{'label2'} );
		$widgets->{'label2'}->show;
		$forms->{'window1'}{'label2'} = $widgets->{'label2'};
		$forms->{'window1'}{'label2'}->set_alignment(0.5, 0.5 );
	    $forms->{'window1'}{'vbox1'}->set_child_packing($forms->{'window1'}{'notebook1'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkStatusbar 'statusbar1'
	    $widgets->{'statusbar1'} = new Gtk::Statusbar;
	    $forms->{'window1'}{'vbox1'}->add($widgets->{'statusbar1'} );
	    $widgets->{'statusbar1'}->show;
	    $forms->{'window1'}{'statusbar1'} = $widgets->{'statusbar1'};
	    $forms->{'window1'}{'vbox1'}->set_child_packing($forms->{'window1'}{'statusbar1'}, 0, 0, 0, 'start' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'window1'}{'window1'}->signal_connect( 'delete_event', "$class\::on_window1_delete_event", '', 'window1', "window1-$instance" );
    $forms->{'window1'}{'window1'}->signal_connect( 'drag_drop', "$class\::on_window1_drag_drop", '', 'window1', "window1-$instance" );
    $forms->{'window1'}{'window1'}->signal_connect( 'drag_motion', "$class\::on_window1_drag_motion", '', 'window1', "window1-$instance" );
    $forms->{'window1'}{'window1'}->signal_connect( 'drag_data_get', "$class\::on_window1_drag_data_get", '', 'window1', "window1-$instance" );
    $forms->{'window1'}{'window1'}->signal_connect( 'drag_data_received', "$class\::on_window1_drag_data_received", '', 'window1', "window1-$instance" );
    $forms->{'window1'}{'quit'}->signal_connect( 'activate', "$class\::on_quit_activate", '', 'quit', "window1-$instance" );
    $forms->{'window1'}{'button_font_registerfont'}->signal_connect( 'clicked', "$class\::on_button_font_registerfont_clicked", '', 'button_font_registerfont', "window1-$instance" );
    $forms->{'window1'}{'button_font_unregisterfont'}->signal_connect( 'clicked', "$class\::on_button_font_unregisterfont_clicked", '', 'button_font_unregisterfont', "window1-$instance" );
    $forms->{'window1'}{'button_font_changehints'}->signal_connect( 'clicked', "$class\::on_button_font_changehints_clicked", '', 'button_font_changehints', "window1-$instance" );
    $forms->{'window1'}{'clist_font_category'}->signal_connect( 'select_row', "$class\::on_clist_font_category_select_row", '', 'clist_font_category', "window1-$instance" );
    $forms->{'window1'}{'clist_font_fontinformation'}->signal_connect( 'select_row', "$class\::on_clist_font_fontinformation_select_row", '', 'clist_font_fontinformation', "window1-$instance" );
    $forms->{'window1'}{'clist_app_application'}->signal_connect( 'select_row', "$class\::on_clist_app_application_select_row", '', 'clist_app_application', "window1-$instance" );
    $forms->{'window1'}{'button_app_idcache_install'}->signal_connect( 'clicked', "$class\::on_button_app_idcache_install_clicked", '', 'button_app_idcache_install', "window1-$instance" );
    $forms->{'window1'}{'button_app_idcache_uninstall'}->signal_connect( 'clicked', "$class\::on_button_app_idcache_uninstall_clicked", '', 'button_app_idcache_uninstall', "window1-$instance" );
    $forms->{'window1'}{'button_app_idcache_unset'}->signal_connect( 'clicked', "$class\::on_button_app_idcache_unset_clicked", '', 'button_app_idcache_unset', "window1-$instance" );
    $forms->{'window1'}{'button_app_idcache_addalias'}->signal_connect( 'clicked', "$class\::on_button_app_idcache_addalias_clicked", '', 'button_app_idcache_addalias', "window1-$instance" );
    $forms->{'window1'}{'button_app_idcache_deletealias'}->signal_connect( 'clicked', "$class\::on_button_app_idcache_deletealias_clicked", '', 'button_app_idcache_deletealias', "window1-$instance" );
    $forms->{'window1'}{'clist_app_idcache'}->signal_connect( 'select_row', "$class\::on_clist_app_idcache_select_row", '', 'clist_app_idcache', "window1-$instance" );
    $forms->{'window1'}{'clist_app_idcache'}->signal_connect( 'click_column', "$class\::on_clist_app_idcache_click_column", '', 'clist_app_idcache', "window1-$instance" );
    $forms->{'window1'}{'button_app_update'}->signal_connect( 'clicked', "$class\::on_button_app_update_clicked", '', 'button_app_update', "window1-$instance" );
    $forms->{'window1'}{'button_app_clean'}->signal_connect( 'clicked', "$class\::on_button_app_clean_clicked", '', 'button_app_clean', "window1-$instance" );
    $forms->{'window1'}{'button_app_purge'}->signal_connect( 'clicked', "$class\::on_button_app_purge_clicked", '', 'button_app_purge', "window1-$instance" );
    $forms->{'window1'}{'button_app_ignore'}->signal_connect( 'clicked', "$class\::on_button_app_ignore_clicked", '', 'button_app_ignore', "window1-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'window1'});
    $self->TOPLEVEL($self->FORM->{'window1'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->INSTANCE("window1-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__WH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__CH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new










1;

__END__

#===============================================================================
#==== Documentation
#===============================================================================
=pod

=head1 NAME

Dfontmgr - version 0.01 2001Ç¯  9·î 29Æü ÅÚÍËÆü 23:58:32 JST

No description

=head1 SYNOPSIS

 use Dfontmgr;

 To construct the window object and show it call
 
 Gtk->init;
 my $window = window1->new;
 $window->TOPLEVEL->show;
 Gtk->main;
 
 OR use the shorthand for the above calls
 
 window1->app_run;

=head1 DESCRIPTION

Unfortunately, the author has not yet written any documentation :-(

=head1 AUTHOR

Yasuhiro Take,,, <redstar\@laminar>

=cut
